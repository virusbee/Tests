{"formatVersion":"1.0","generatedAt":"2022-12-13T23:38:00Z","name":"Apple Swift Packages","overview":"Swift packages published by Apple","packages":[{"keywords":["algorithm","iterator","itertools"],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-algorithms/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-algorithms/main/README.md","summary":"Commonly used sequence and collection algorithms for Swift","url":"https://github.com/apple/swift-algorithms.git","versions":[{"defaultToolsVersion":"5.1","manifests":{"5.1":{"packageName":"swift-algorithms","products":[{"name":"Algorithms","targets":["Algorithms"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Algorithms","name":"Algorithms"}],"toolsVersion":"5.1"}},"version":"1.0.0"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"packageName":"swift-algorithms","products":[{"name":"Algorithms","targets":["Algorithms"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Algorithms","name":"Algorithms"}],"toolsVersion":"5.1"}},"version":"0.2.1"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"packageName":"swift-algorithms","products":[{"name":"Algorithms","targets":["Algorithms"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Algorithms","name":"Algorithms"}],"toolsVersion":"5.1"}},"version":"0.2.0"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"packageName":"swift-algorithms","products":[{"name":"Algorithms","targets":["Algorithms"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Algorithms","name":"Algorithms"}],"toolsVersion":"5.1"}},"version":"0.1.1"}]},{"keywords":["cli","command-line","flag","option"],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-argument-parser/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-argument-parser/main/README.md","summary":"Straightforward, type-safe argument parsing for Swift","url":"https://github.com/apple/swift-argument-parser.git","versions":[{"defaultToolsVersion":"5.5","manifests":{"5.5":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.5"}},"version":"1.2.0"},{"defaultToolsVersion":"5.5","manifests":{"5.5":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.5"}},"version":"1.1.4"},{"defaultToolsVersion":"5.5","manifests":{"5.5":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.5"}},"version":"1.1.3"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.2"}},"version":"0.5.0"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.2"}},"version":"0.4.4"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"packageName":"swift-argument-parser","products":[{"name":"ArgumentParser","targets":["ArgumentParser"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ArgumentParser","name":"ArgumentParser"}],"toolsVersion":"5.2"}},"version":"0.4.3"}]},{"keywords":["concurrency","synchronization"],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-atomics/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-atomics/main/README.md","summary":"Low-level atomic operations for Swift","url":"https://github.com/apple/swift-atomics.git","versions":[{"defaultToolsVersion":"5.5","manifests":{"5.5":{"packageName":"swift-atomics","products":[{"name":"Atomics","targets":["Atomics"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Atomics","name":"Atomics"}],"toolsVersion":"5.5"}},"version":"1.0.3"},{"defaultToolsVersion":"5.3","manifests":{"5.3":{"packageName":"swift-atomics","products":[{"name":"Atomics","targets":["Atomics"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Atomics","name":"Atomics"}],"toolsVersion":"5.3"}},"version":"1.0.2"},{"defaultToolsVersion":"5.3","manifests":{"5.3":{"packageName":"swift-atomics","products":[{"name":"Atomics","targets":["Atomics"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Atomics","name":"Atomics"}],"toolsVersion":"5.3"}},"version":"1.0.1"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"packageName":"swift-atomics","products":[{"name":"Atomics","targets":["Atomics"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Atomics","name":"Atomics"}],"toolsVersion":"5.1"}},"version":"0.0.3"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"packageName":"swift-atomics","products":[{"name":"Atomics","targets":["Atomics"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Atomics","name":"Atomics"}],"toolsVersion":"5.1"}},"version":"0.0.2"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"packageName":"swift-atomics","products":[{"name":"Atomics","targets":["Atomics"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Atomics","name":"Atomics"}],"toolsVersion":"5.1"}},"version":"0.0.1"}]},{"keywords":["collection","container","deque","dequeue","hash","ordered-dictionary","ordered-set","queue","sequence"],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-collections/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-collections/main/README.md","summary":"Commonly used data structures for Swift","url":"https://github.com/apple/swift-collections.git","versions":[{"defaultToolsVersion":"5.5","manifests":{"5.5":{"packageName":"swift-collections","products":[{"name":"Collections","targets":["Collections"],"type":{"library":["automatic"]}},{"name":"DequeModule","targets":["DequeModule"],"type":{"library":["automatic"]}},{"name":"OrderedCollections","targets":["OrderedCollections"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Collections","name":"Collections"},{"moduleName":"DequeModule","name":"DequeModule"},{"moduleName":"OrderedCollections","name":"OrderedCollections"}],"toolsVersion":"5.5"}},"version":"1.0.4"},{"defaultToolsVersion":"5.3","manifests":{"5.3":{"packageName":"swift-collections","products":[{"name":"Collections","targets":["Collections"],"type":{"library":["automatic"]}},{"name":"DequeModule","targets":["DequeModule"],"type":{"library":["automatic"]}},{"name":"OrderedCollections","targets":["OrderedCollections"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Collections","name":"Collections"},{"moduleName":"DequeModule","name":"DequeModule"},{"moduleName":"OrderedCollections","name":"OrderedCollections"}],"toolsVersion":"5.3"}},"version":"1.0.3"},{"defaultToolsVersion":"5.3","manifests":{"5.3":{"packageName":"swift-collections","products":[{"name":"Collections","targets":["Collections"],"type":{"library":["automatic"]}},{"name":"DequeModule","targets":["DequeModule"],"type":{"library":["automatic"]}},{"name":"OrderedCollections","targets":["OrderedCollections"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Collections","name":"Collections"},{"moduleName":"DequeModule","name":"DequeModule"},{"moduleName":"OrderedCollections","name":"OrderedCollections"}],"toolsVersion":"5.3"}},"version":"1.0.2"},{"defaultToolsVersion":"5.3","manifests":{"5.3":{"packageName":"swift-collections","products":[{"name":"Collections","targets":["Collections"],"type":{"library":["automatic"]}},{"name":"DequeModule","targets":["DequeModule"],"type":{"library":["automatic"]}},{"name":"OrderedCollections","targets":["OrderedCollections"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Collections","name":"Collections"},{"moduleName":"DequeModule","name":"DequeModule"},{"moduleName":"OrderedCollections","name":"OrderedCollections"}],"toolsVersion":"5.3"}},"version":"0.0.7"},{"defaultToolsVersion":"5.3","manifests":{"5.3":{"packageName":"swift-collections","products":[{"name":"Collections","targets":["Collections"],"type":{"library":["automatic"]}},{"name":"DequeModule","targets":["DequeModule"],"type":{"library":["automatic"]}},{"name":"OrderedCollections","targets":["OrderedCollections"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Collections","name":"Collections"},{"moduleName":"DequeModule","name":"DequeModule"},{"moduleName":"OrderedCollections","name":"OrderedCollections"}],"toolsVersion":"5.3"}},"version":"0.0.5"},{"defaultToolsVersion":"5.3","manifests":{"5.3":{"packageName":"swift-collections","products":[{"name":"Collections","targets":["Collections"],"type":{"library":["automatic"]}},{"name":"DequeModule","targets":["DequeModule"],"type":{"library":["automatic"]}},{"name":"OrderedCollections","targets":["OrderedCollections"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Collections","name":"Collections"},{"moduleName":"DequeModule","name":"DequeModule"},{"moduleName":"OrderedCollections","name":"OrderedCollections"}],"toolsVersion":"5.3"}},"version":"0.0.4"}]},{"keywords":["cryptography","elliptic-curves","hash-functions","ciphers","ecdsa","ecdh","eddsa","boringssl"],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-crypto/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-crypto/main/README.md","summary":"Implements most of Apple's CryptoKit API for use across multiple platforms.","url":"https://github.com/apple/swift-crypto.git","versions":[{"defaultToolsVersion":"5.5","manifests":{"5.5":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"},{"name":"ios","version":"13.0"},{"name":"watchos","version":"6.0"},{"name":"tvos","version":"13.0"}],"packageName":"swift-crypto","products":[{"name":"Crypto","targets":["Crypto"],"type":{"library":["automatic"]}},{"name":"_CryptoExtras","targets":["_CryptoExtras"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Crypto","name":"Crypto"},{"moduleName":"_CryptoExtras","name":"_CryptoExtras"}],"toolsVersion":"5.5"}},"version":"2.2.2"},{"defaultToolsVersion":"5.5","manifests":{"5.5":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"},{"name":"ios","version":"13.0"},{"name":"watchos","version":"6.0"},{"name":"tvos","version":"13.0"}],"packageName":"swift-crypto","products":[{"name":"Crypto","targets":["Crypto"],"type":{"library":["automatic"]}},{"name":"_CryptoExtras","targets":["_CryptoExtras"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Crypto","name":"Crypto"},{"moduleName":"_CryptoExtras","name":"_CryptoExtras"}],"toolsVersion":"5.5"}},"version":"2.2.1"},{"defaultToolsVersion":"5.5","manifests":{"5.5":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"},{"name":"ios","version":"13.0"},{"name":"watchos","version":"6.0"},{"name":"tvos","version":"13.0"}],"packageName":"swift-crypto","products":[{"name":"Crypto","targets":["Crypto"],"type":{"library":["automatic"]}},{"name":"_CryptoExtras","targets":["_CryptoExtras"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Crypto","name":"Crypto"},{"moduleName":"_CryptoExtras","name":"_CryptoExtras"}],"toolsVersion":"5.5"}},"version":"2.2.0"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"},{"name":"ios","version":"13.0"},{"name":"watchos","version":"6.0"},{"name":"tvos","version":"13.0"}],"packageName":"swift-crypto","products":[{"name":"Crypto","targets":["Crypto"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Crypto","name":"Crypto"}],"toolsVersion":"5.1"}},"version":"1.1.7"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"},{"name":"ios","version":"13.0"},{"name":"watchos","version":"6.0"},{"name":"tvos","version":"13.0"}],"packageName":"swift-crypto","products":[{"name":"Crypto","targets":["Crypto"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Crypto","name":"Crypto"}],"toolsVersion":"5.1"}},"version":"1.1.6"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"},{"name":"ios","version":"13.0"},{"name":"watchos","version":"6.0"},{"name":"tvos","version":"13.0"}],"packageName":"swift-crypto","products":[{"name":"Crypto","targets":["Crypto"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Crypto","name":"Crypto"}],"toolsVersion":"5.1"}},"version":"1.1.5"}]},{"keywords":["asynchronous-io","networking","event-driven","high-performance","non-blocking-io","non-blocking","swift-server"],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-nio/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-nio/main/README.md","summary":"Supports development of asynchronous event-driven network applications that maintain high performance, non-blocking protocol servers & clients.","url":"https://github.com/apple/swift-nio.git","versions":[{"defaultToolsVersion":"5.5","manifests":{"5.5":{"packageName":"swift-nio","products":[{"name":"NIO","targets":["NIO"],"type":{"library":["automatic"]}},{"name":"NIOConcurrencyHelpers","targets":["NIOConcurrencyHelpers"],"type":{"library":["automatic"]}},{"name":"NIOCore","targets":["NIOCore"],"type":{"library":["automatic"]}},{"name":"NIOEmbedded","targets":["NIOEmbedded"],"type":{"library":["automatic"]}},{"name":"NIOFoundationCompat","targets":["NIOFoundationCompat"],"type":{"library":["automatic"]}},{"name":"NIOHTTP1","targets":["NIOHTTP1"],"type":{"library":["automatic"]}},{"name":"NIOPosix","targets":["NIOPosix"],"type":{"library":["automatic"]}},{"name":"NIOTLS","targets":["NIOTLS"],"type":{"library":["automatic"]}},{"name":"NIOTestUtils","targets":["NIOTestUtils"],"type":{"library":["automatic"]}},{"name":"NIOWebSocket","targets":["NIOWebSocket"],"type":{"library":["automatic"]}},{"name":"_NIOBeta","targets":["_NIOBeta"],"type":{"library":["automatic"]}},{"name":"_NIOConcurrency","targets":["_NIOConcurrency"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NIO","name":"NIO"},{"moduleName":"NIOConcurrencyHelpers","name":"NIOConcurrencyHelpers"},{"moduleName":"NIOCore","name":"NIOCore"},{"moduleName":"NIOEmbedded","name":"NIOEmbedded"},{"moduleName":"NIOFoundationCompat","name":"NIOFoundationCompat"},{"moduleName":"NIOHTTP1","name":"NIOHTTP1"},{"moduleName":"NIOPosix","name":"NIOPosix"},{"moduleName":"NIOTLS","name":"NIOTLS"},{"moduleName":"NIOTestUtils","name":"NIOTestUtils"},{"moduleName":"NIOWebSocket","name":"NIOWebSocket"},{"moduleName":"_NIOBeta","name":"_NIOBeta"},{"moduleName":"_NIOConcurrency","name":"_NIOConcurrency"}],"toolsVersion":"5.5"}},"version":"2.45.0"},{"defaultToolsVersion":"5.5","manifests":{"5.5":{"packageName":"swift-nio","products":[{"name":"NIO","targets":["NIO"],"type":{"library":["automatic"]}},{"name":"NIOConcurrencyHelpers","targets":["NIOConcurrencyHelpers"],"type":{"library":["automatic"]}},{"name":"NIOCore","targets":["NIOCore"],"type":{"library":["automatic"]}},{"name":"NIOEmbedded","targets":["NIOEmbedded"],"type":{"library":["automatic"]}},{"name":"NIOFoundationCompat","targets":["NIOFoundationCompat"],"type":{"library":["automatic"]}},{"name":"NIOHTTP1","targets":["NIOHTTP1"],"type":{"library":["automatic"]}},{"name":"NIOPosix","targets":["NIOPosix"],"type":{"library":["automatic"]}},{"name":"NIOTLS","targets":["NIOTLS"],"type":{"library":["automatic"]}},{"name":"NIOTestUtils","targets":["NIOTestUtils"],"type":{"library":["automatic"]}},{"name":"NIOWebSocket","targets":["NIOWebSocket"],"type":{"library":["automatic"]}},{"name":"_NIOBeta","targets":["_NIOBeta"],"type":{"library":["automatic"]}},{"name":"_NIOConcurrency","targets":["_NIOConcurrency"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NIO","name":"NIO"},{"moduleName":"NIOConcurrencyHelpers","name":"NIOConcurrencyHelpers"},{"moduleName":"NIOCore","name":"NIOCore"},{"moduleName":"NIOEmbedded","name":"NIOEmbedded"},{"moduleName":"NIOFoundationCompat","name":"NIOFoundationCompat"},{"moduleName":"NIOHTTP1","name":"NIOHTTP1"},{"moduleName":"NIOPosix","name":"NIOPosix"},{"moduleName":"NIOTLS","name":"NIOTLS"},{"moduleName":"NIOTestUtils","name":"NIOTestUtils"},{"moduleName":"NIOWebSocket","name":"NIOWebSocket"},{"moduleName":"_NIOBeta","name":"_NIOBeta"},{"moduleName":"_NIOConcurrency","name":"_NIOConcurrency"}],"toolsVersion":"5.5"}},"version":"2.44.0"},{"defaultToolsVersion":"5.5","manifests":{"5.5":{"packageName":"swift-nio","products":[{"name":"NIO","targets":["NIO"],"type":{"library":["automatic"]}},{"name":"NIOConcurrencyHelpers","targets":["NIOConcurrencyHelpers"],"type":{"library":["automatic"]}},{"name":"NIOCore","targets":["NIOCore"],"type":{"library":["automatic"]}},{"name":"NIOEmbedded","targets":["NIOEmbedded"],"type":{"library":["automatic"]}},{"name":"NIOFoundationCompat","targets":["NIOFoundationCompat"],"type":{"library":["automatic"]}},{"name":"NIOHTTP1","targets":["NIOHTTP1"],"type":{"library":["automatic"]}},{"name":"NIOPosix","targets":["NIOPosix"],"type":{"library":["automatic"]}},{"name":"NIOTLS","targets":["NIOTLS"],"type":{"library":["automatic"]}},{"name":"NIOTestUtils","targets":["NIOTestUtils"],"type":{"library":["automatic"]}},{"name":"NIOWebSocket","targets":["NIOWebSocket"],"type":{"library":["automatic"]}},{"name":"_NIOBeta","targets":["_NIOBeta"],"type":{"library":["automatic"]}},{"name":"_NIOConcurrency","targets":["_NIOConcurrency"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NIO","name":"NIO"},{"moduleName":"NIOConcurrencyHelpers","name":"NIOConcurrencyHelpers"},{"moduleName":"NIOCore","name":"NIOCore"},{"moduleName":"NIOEmbedded","name":"NIOEmbedded"},{"moduleName":"NIOFoundationCompat","name":"NIOFoundationCompat"},{"moduleName":"NIOHTTP1","name":"NIOHTTP1"},{"moduleName":"NIOPosix","name":"NIOPosix"},{"moduleName":"NIOTLS","name":"NIOTLS"},{"moduleName":"NIOTestUtils","name":"NIOTestUtils"},{"moduleName":"NIOWebSocket","name":"NIOWebSocket"},{"moduleName":"_NIOBeta","name":"_NIOBeta"},{"moduleName":"_NIOConcurrency","name":"_NIOConcurrency"}],"toolsVersion":"5.5"}},"version":"2.43.1"},{"defaultToolsVersion":"4.0","manifests":{"4.0":{"packageName":"swift-nio","products":[{"name":"NIO","targets":["NIO"],"type":{"library":["automatic"]}},{"name":"NIOConcurrencyHelpers","targets":["NIOConcurrencyHelpers"],"type":{"library":["automatic"]}},{"name":"NIOFoundationCompat","targets":["NIOFoundationCompat"],"type":{"library":["automatic"]}},{"name":"NIOHTTP1","targets":["NIOHTTP1"],"type":{"library":["automatic"]}},{"name":"NIOTLS","targets":["NIOTLS"],"type":{"library":["automatic"]}},{"name":"NIOWebSocket","targets":["NIOWebSocket"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NIO","name":"NIO"},{"moduleName":"NIOConcurrencyHelpers","name":"NIOConcurrencyHelpers"},{"moduleName":"NIOFoundationCompat","name":"NIOFoundationCompat"},{"moduleName":"NIOHTTP1","name":"NIOHTTP1"},{"moduleName":"NIOTLS","name":"NIOTLS"},{"moduleName":"NIOWebSocket","name":"NIOWebSocket"}],"toolsVersion":"4.0"}},"version":"1.14.4"},{"defaultToolsVersion":"4.0","manifests":{"4.0":{"packageName":"swift-nio","products":[{"name":"NIO","targets":["NIO"],"type":{"library":["automatic"]}},{"name":"NIOConcurrencyHelpers","targets":["NIOConcurrencyHelpers"],"type":{"library":["automatic"]}},{"name":"NIOFoundationCompat","targets":["NIOFoundationCompat"],"type":{"library":["automatic"]}},{"name":"NIOHTTP1","targets":["NIOHTTP1"],"type":{"library":["automatic"]}},{"name":"NIOTLS","targets":["NIOTLS"],"type":{"library":["automatic"]}},{"name":"NIOWebSocket","targets":["NIOWebSocket"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NIO","name":"NIO"},{"moduleName":"NIOConcurrencyHelpers","name":"NIOConcurrencyHelpers"},{"moduleName":"NIOFoundationCompat","name":"NIOFoundationCompat"},{"moduleName":"NIOHTTP1","name":"NIOHTTP1"},{"moduleName":"NIOTLS","name":"NIOTLS"},{"moduleName":"NIOWebSocket","name":"NIOWebSocket"}],"toolsVersion":"4.0"}},"version":"1.14.3"},{"defaultToolsVersion":"4.0","manifests":{"4.0":{"packageName":"swift-nio","products":[{"name":"NIO","targets":["NIO"],"type":{"library":["automatic"]}},{"name":"NIOConcurrencyHelpers","targets":["NIOConcurrencyHelpers"],"type":{"library":["automatic"]}},{"name":"NIOFoundationCompat","targets":["NIOFoundationCompat"],"type":{"library":["automatic"]}},{"name":"NIOHTTP1","targets":["NIOHTTP1"],"type":{"library":["automatic"]}},{"name":"NIOTLS","targets":["NIOTLS"],"type":{"library":["automatic"]}},{"name":"NIOWebSocket","targets":["NIOWebSocket"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NIO","name":"NIO"},{"moduleName":"NIOConcurrencyHelpers","name":"NIOConcurrencyHelpers"},{"moduleName":"NIOFoundationCompat","name":"NIOFoundationCompat"},{"moduleName":"NIOHTTP1","name":"NIOHTTP1"},{"moduleName":"NIOTLS","name":"NIOTLS"},{"moduleName":"NIOWebSocket","name":"NIOWebSocket"}],"toolsVersion":"4.0"}},"version":"1.14.2"}]},{"keywords":["complex","math","mathematics","maths","real","trig"],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-numerics/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-numerics/main/README.md","summary":"Advanced mathematical types and functions for Swift","url":"https://github.com/apple/swift-numerics.git","versions":[{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"swift-numerics","products":[{"name":"ComplexModule","targets":["ComplexModule"],"type":{"library":["automatic"]}},{"name":"Numerics","targets":["Numerics"],"type":{"library":["automatic"]}},{"name":"RealModule","targets":["RealModule"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ComplexModule","name":"ComplexModule"},{"moduleName":"Numerics","name":"Numerics"},{"moduleName":"RealModule","name":"RealModule"}],"toolsVersion":"5.0"}},"version":"1.0.2"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"swift-numerics","products":[{"name":"ComplexModule","targets":["ComplexModule"],"type":{"library":["automatic"]}},{"name":"Numerics","targets":["Numerics"],"type":{"library":["automatic"]}},{"name":"RealModule","targets":["RealModule"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ComplexModule","name":"ComplexModule"},{"moduleName":"Numerics","name":"Numerics"},{"moduleName":"RealModule","name":"RealModule"}],"toolsVersion":"5.0"}},"version":"1.0.1"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"swift-numerics","products":[{"name":"ComplexModule","targets":["ComplexModule"],"type":{"library":["automatic"]}},{"name":"Numerics","targets":["Numerics"],"type":{"library":["automatic"]}},{"name":"RealModule","targets":["RealModule"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ComplexModule","name":"ComplexModule"},{"moduleName":"Numerics","name":"Numerics"},{"moduleName":"RealModule","name":"RealModule"}],"toolsVersion":"5.0"}},"version":"1.0.0"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"swift-numerics","products":[{"name":"ComplexModule","targets":["ComplexModule"],"type":{"library":["automatic"]}},{"name":"Numerics","targets":["Numerics"],"type":{"library":["automatic"]}},{"name":"RealModule","targets":["RealModule"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ComplexModule","name":"ComplexModule"},{"moduleName":"Numerics","name":"Numerics"},{"moduleName":"RealModule","name":"RealModule"}],"toolsVersion":"5.0"}},"version":"0.1.0"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"swift-numerics","products":[{"name":"ComplexModule","targets":["ComplexModule"],"type":{"library":["automatic"]}},{"name":"Numerics","targets":["Numerics"],"type":{"library":["automatic"]}},{"name":"RealModule","targets":["RealModule"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ComplexModule","name":"ComplexModule"},{"moduleName":"Numerics","name":"Numerics"},{"moduleName":"RealModule","name":"RealModule"}],"toolsVersion":"5.0"}},"version":"0.0.8"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"swift-numerics","products":[{"name":"ComplexModule","targets":["ComplexModule"],"type":{"library":["automatic"]}},{"name":"Numerics","targets":["Numerics"],"type":{"library":["automatic"]}},{"name":"RealModule","targets":["RealModule"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ComplexModule","name":"ComplexModule"},{"moduleName":"Numerics","name":"Numerics"},{"moduleName":"RealModule","name":"RealModule"}],"toolsVersion":"5.0"}},"summary":"Re-tag 0.0.7 after removing f16 muladd.","version":"0.0.7"}]},{"keywords":[],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-protobuf/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-protobuf/main/README.md","summary":"Implements a runtime and plugin for using protobuf serialization technology with Swift.","url":"https://github.com/apple/swift-protobuf.git","versions":[{"defaultToolsVersion":"4.2","manifests":{"4.2":{"packageName":"SwiftProtobuf","products":[{"name":"SwiftProtobuf","targets":["SwiftProtobuf"],"type":{"library":["automatic"]}},{"name":"SwiftProtobufPluginLibrary","targets":["SwiftProtobufPluginLibrary"],"type":{"library":["automatic"]}},{"name":"protoc-gen-swift","targets":["protoc-gen-swift"],"type":{"executable":null}}],"targets":[{"moduleName":"SwiftProtobuf","name":"SwiftProtobuf"},{"moduleName":"SwiftProtobufPluginLibrary","name":"SwiftProtobufPluginLibrary"},{"moduleName":"protoc_gen_swift","name":"protoc-gen-swift"}],"toolsVersion":"4.2"}},"version":"1.20.3"},{"defaultToolsVersion":"4.2","manifests":{"4.2":{"packageName":"SwiftProtobuf","products":[{"name":"SwiftProtobuf","targets":["SwiftProtobuf"],"type":{"library":["automatic"]}},{"name":"SwiftProtobufPluginLibrary","targets":["SwiftProtobufPluginLibrary"],"type":{"library":["automatic"]}},{"name":"protoc-gen-swift","targets":["protoc-gen-swift"],"type":{"executable":null}}],"targets":[{"moduleName":"SwiftProtobuf","name":"SwiftProtobuf"},{"moduleName":"SwiftProtobufPluginLibrary","name":"SwiftProtobufPluginLibrary"},{"moduleName":"protoc_gen_swift","name":"protoc-gen-swift"}],"toolsVersion":"4.2"}},"version":"1.20.2"},{"defaultToolsVersion":"4.2","manifests":{"4.2":{"packageName":"SwiftProtobuf","products":[{"name":"SwiftProtobuf","targets":["SwiftProtobuf"],"type":{"library":["automatic"]}},{"name":"SwiftProtobufPluginLibrary","targets":["SwiftProtobufPluginLibrary"],"type":{"library":["automatic"]}},{"name":"protoc-gen-swift","targets":["protoc-gen-swift"],"type":{"executable":null}}],"targets":[{"moduleName":"SwiftProtobuf","name":"SwiftProtobuf"},{"moduleName":"SwiftProtobufPluginLibrary","name":"SwiftProtobufPluginLibrary"},{"moduleName":"protoc_gen_swift","name":"protoc-gen-swift"}],"toolsVersion":"4.2"}},"version":"1.20.1"}]},{"keywords":["file-descriptor","file-path","posix"],"license":{"name":"Apache-2.0","url":"https://raw.githubusercontent.com/apple/swift-system/main/LICENSE.txt"},"readmeURL":"https://raw.githubusercontent.com/apple/swift-system/main/README.md","summary":"Low-level system calls and types for Swift","url":"https://github.com/apple/swift-system.git","versions":[{"defaultToolsVersion":"5.2","manifests":{"5.2":{"packageName":"swift-system","products":[{"name":"SystemPackage","targets":["SystemPackage"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SystemPackage","name":"SystemPackage"}],"toolsVersion":"5.2"}},"version":"1.2.1"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"packageName":"swift-system","products":[{"name":"SystemPackage","targets":["SystemPackage"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SystemPackage","name":"SystemPackage"}],"toolsVersion":"5.2"}},"version":"1.2.0"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"packageName":"swift-system","products":[{"name":"SystemPackage","targets":["SystemPackage"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SystemPackage","name":"SystemPackage"}],"toolsVersion":"5.2"}},"version":"1.1.1"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"packageName":"swift-system","products":[{"name":"SystemPackage","targets":["SystemPackage"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SystemPackage","name":"SystemPackage"}],"toolsVersion":"5.2"}},"version":"0.0.3"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"packageName":"swift-system","products":[{"name":"SystemPackage","targets":["SystemPackage"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SystemPackage","name":"SystemPackage"}],"toolsVersion":"5.2"}},"version":"0.0.2"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"packageName":"swift-system","products":[{"name":"SystemPackage","targets":["SystemPackage"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SystemPackage","name":"SystemPackage"}],"toolsVersion":"5.2"}},"version":"v0.0.2"}]}],"signature":{"certificate":{"issuer":{"commonName":"Apple Worldwide Developer Relations Certification Authority","organization":"Apple Inc.","organizationalUnit":"G3"},"subject":{"commonName":"Swift Package Collection: Apple Inc. - Swift","organization":"Apple Inc. - Swift","organizationalUnit":"XLVRDL8TZV","userID":"XLVRDL8TZV"}},"signature":"ewogICJhbGciIDogIlJTMjU2IiwKICAieDVjIiA6IFsKICAgICJNSUlGaFRDQ0JHMmdBd0lCQWdJUVMyaGptbEJ1WnpQOFlHeTZBOW5OaERBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSXlNRGd4TURJek1UTXdObG9YRFRJek1EZ3hNREl6TVRNd05Wb3dnWkl4R2pBWUJnb0praWFKay9Jc1pBRUJEQXBZVEZaU1JFdzRWRnBXTVRVd013WURWUVFEREN4VGQybG1kQ0JRWVdOcllXZGxJRU52Ykd4bFkzUnBiMjQ2SUVGd2NHeGxJRWx1WXk0Z0xTQlRkMmxtZERFVE1CRUdBMVVFQ3d3S1dFeFdVa1JNT0ZSYVZqRWJNQmtHQTFVRUNnd1NRWEJ3YkdVZ1NXNWpMaUF0SUZOM2FXWjBNUXN3Q1FZRFZRUUdFd0pWVXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTStUM09iTDh4dGh2ZzFLKzFYR1NndnIxZFVSbHVIZ0ZHWTYwUVZVaVl6KzV6VmFMeURQRWg2VXl3MjNPZ2RXMnZocllWTVJyTStISExOUkh4YVBTb0V3Q2x5cm1yaXU1YVBvR0JvdTkyQktsb2htbEJNM1VpZnFlNmp2cGFWWkdsN1Uwdjd1eGVlYzloQmE0cWNUYTRSMk55bTd4bGZaSzVIaUx5cUpCa2tCVXlIbVQyQXdJRlpCeWRTeFFzaTlSaGE2ZGN0T09yNWtkL0NCZmxuK0ZqUjFwdEZwNWQ0V201M2pWWVBoZEtmanBiK2QrcmdFYk10dmZ6TmtDS2RvU0RBNmZkUzZmdG00Y0JPU1FEZ0lyRVhSczNhc28rejJMQWpkQXR3RDRxSUlQQm8venA2TUtXNzhmcS8rL29Lei9oT1d2K1NHVk05KzJXMFd6YUR6aEswQ0F3RUFBYU9DQWZFd2dnSHRNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVDZjdBRlpENXIyUUtraEs1SmloakRKZnNwN0l3UVFZSUt3WUJCUVVIQVFFRU5UQXpNREVHQ0NzR0FRVUZCekFCaGlWb2RIUndPaTh2YjJOemNDNWhjSEJzWlM1amIyMHZiMk56Y0RBekxYZDNaSEpuTXpFNU1JSUJIZ1lEVlIwZ0JJSUJGVENDQVJFd2dnRU5CZ2txaGtpRzkyTmtCUUV3Z2Y4d2djTUdDQ3NHQVFVRkJ3SUNNSUcyRElHelVtVnNhV0Z1WTJVZ2IyNGdkR2hwY3lCalpYSjBhV1pwWTJGMFpTQmllU0JoYm5rZ2NHRnlkSGtnWVhOemRXMWxjeUJoWTJObGNIUmhibU5sSUc5bUlIUm9aU0IwYUdWdUlHRndjR3hwWTJGaWJHVWdjM1JoYm1SaGNtUWdkR1Z5YlhNZ1lXNWtJR052Ym1ScGRHbHZibk1nYjJZZ2RYTmxMQ0JqWlhKMGFXWnBZMkYwWlNCd2IyeHBZM2tnWVc1a0lHTmxjblJwWm1sallYUnBiMjRnY0hKaFkzUnBZMlVnYzNSaGRHVnRaVzUwY3k0d053WUlLd1lCQlFVSEFnRVdLMmgwZEhCek9pOHZkM2QzTG1Gd2NHeGxMbU52YlM5alpYSjBhV1pwWTJGMFpXRjFkR2h2Y21sMGVTOHdGZ1lEVlIwbEFRSC9CQXd3Q2dZSUt3WUJCUVVIQXdNd0hRWURWUjBPQkJZRUZOaDJNbG9VTkNLRkZodERLdTJBeDhiZXVwUURNQTRHQTFVZER3RUIvd1FFQXdJSGdEQVFCZ29xaGtpRzkyTmtCZ0VqQkFJRkFEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUF0dnI4VXk3Y2JES09QR0l0ZmY1bDNKWEErTkxTMGFDYVRZUlAyVkhiM0lSMFdpSVlpSkhUdEc3MFpiSFZpamJUdjdNOXlvVGx1Uzlham1WeXVQSVRBOUJEYkNTNUExeGcvaExwaWNMV0tJZlJ3VzFPL3RNVFlHdGdxYXhyRmkxUDZMSFEzTElzemJFYnFWdjRxTkQybGQyUlZZQXc2UG5KRmwwT1gwcnF1KzRWVExjUWZQaFFkS1JDR3AwbzJDR2JBcU5EMGtUOVlzQ05pSTZ3OWE1b2VXU2lqWlE4NUxxaUZBS1lmbE9Vd3B4TTluamtWNHhpRUNpUmhDS2VlUHdrWHdqQm8xRlMyOTVMV0duVmhOTklHbTRnTzlybHBHbEpKQ0tRaFFGOXN4RXZHMVBZcGxKRHc5NlFOVXVpMFhBSm1kMEFpcUl1RkVNT1JOck9LcEtUQUE9PSIsCiAgICAiTUlJRVVUQ0NBem1nQXdJQkFnSVFmSzlwQ2lXM09mNTdtMFI2d1hqRjdqQU5CZ2txaGtpRzl3MEJBUXNGQURCaU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDaE1LUVhCd2JHVWdTVzVqTGpFbU1DUUdBMVVFQ3hNZFFYQndiR1VnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3hGakFVQmdOVkJBTVREVUZ3Y0d4bElGSnZiM1FnUTBFd0hoY05NakF3TWpFNU1UZ3hNelEzV2hjTk16QXdNakl3TURBd01EQXdXakIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEyUFdKL0toWkM0ZkhUSkV1TFZhUTAzZ2RwRERwcFVqdkMwTy9MWVQ3SkYxRkcrWHJXVFlTWEZSa25teGlMYlRHbDhyTVBQYldCcEg4NVFLbUhHcTBlZFZueTZ6cFB3Y1I0WVM4UngxbWpqbWk2TFJKN1RyUzRSQmdlbzZUak1yQTJnekFnOURqK1pIV3A0ekl3WFBpcmtiUllwMlNxSkJnTjMxb2xzMk40UHliK25pNzQzdXZMUmZkVy82QVdTTjFGN2dTd2UwYjVUVE8vaUsxbmttdzVWVy9qNFNpUEtpNnhZYVZGdVFBeVo4RDBNeXpPaFo3MWdWY25ldEhyZzIxTFl3T2FVMUEwRXRNT3dTZWpTR3hyQzVEVkRET3dZcUdsSmhMMzJvTlAvNzdISzZYRjhKNENqRGdYeDlVTzBtM0pRQWFONExTVnBlbFVrbDhZRGliN3dJREFRQUJvNEh2TUlIc01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRQXdId1lEVlIwakJCZ3dGb0FVSzlCcFI1UjJDZjcwYTQwdVFLYjNSMDEvQ0Y0d1JBWUlLd1lCQlFVSEFRRUVPREEyTURRR0NDc0dBUVVGQnpBQmhpaG9kSFJ3T2k4dmIyTnpjQzVoY0hCc1pTNWpiMjB2YjJOemNEQXpMV0Z3Y0d4bGNtOXZkR05oTUM0R0ExVWRId1FuTUNVd0k2QWhvQitHSFdoMGRIQTZMeTlqY213dVlYQndiR1V1WTI5dEwzSnZiM1F1WTNKc01CMEdBMVVkRGdRV0JCUUovc0FWa1BtdlpBcVNFcmttS0dNTWwreW5zakFPQmdOVkhROEJBZjhFQkFNQ0FRWXdFQVlLS29aSWh2ZGpaQVlDQVFRQ0JRQXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSzFsRStqMjRJRjNSQUpIUXI1ZnBUa2c2bUtwL2NXUXlYTVQxWjZiMEtvUGpZM0w3UUhQYkNoQVc4ZFZKRUg0L00vQnRTUHAzT3p4YjhxQUhYZkN4R0ZKSldldkQ4bzVKYTNUNDNyTU15Z05EaTZoVjBCeit1WmNyZ1pSS2UzamhReFBZZHd5Rm90MzBFVEtYWElETVVhY3JwdEFHdnIwNE5NKytpK01acCtYeEZSWjc5Skk5QWVaU1dCWkdjZmRsTkhBd1d4L2VDSHZET3M3YkptQ1MxSmdPTFU1Z20zc1VqRlR2ZytSVEVsSmRJK21VY3VFUjA0ZGRTZHV2Zm5TWFBOL3dtd0xDVGJpWk9UQ053TVVHZFhxYXBTcXFkdis5cG9JWjR2dks3aXFGMG1EcjgvTHZPblA2cFZ4c0xSRm9zemxoNm9LdzBFNmVWemFVRFNkbFRzPSIsCiAgICAiTUlJRXV6Q0NBNk9nQXdJQkFnSUJBakFOQmdrcWhraUc5dzBCQVFVRkFEQmlNUXN3Q1FZRFZRUUdFd0pWVXpFVE1CRUdBMVVFQ2hNS1FYQndiR1VnU1c1akxqRW1NQ1FHQTFVRUN4TWRRWEJ3YkdVZ1EyVnlkR2xtYVdOaGRHbHZiaUJCZFhSb2IzSnBkSGt4RmpBVUJnTlZCQU1URFVGd2NHeGxJRkp2YjNRZ1EwRXdIaGNOTURZd05ESTFNakUwTURNMldoY05NelV3TWpBNU1qRTBNRE0yV2pCaU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDaE1LUVhCd2JHVWdTVzVqTGpFbU1DUUdBMVVFQ3hNZFFYQndiR1VnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3hGakFVQmdOVkJBTVREVUZ3Y0d4bElGSnZiM1FnUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURra2FrSkg1SGJIa2RRNndYdFhubUVMZXMyb2xkTVZleUxHWW5lK1V0czlRZXJJakFDNkJnKytGQUowMzlCcUpqNTBjcG1uQ1JyRWRDanUrUWJLc01mbFo1NkRLUkhpMXZVRmpjenk4UVBUYzRVYWRISkdYTDFYUTdWZjErYjhpVUR1bFdQVFYwTjhXUTFJeFZMRlZrZHM1VDM5cHllejFDNndWaFFaNDhJdENEM3k2d3NJRzl3dGo4Qk1JeTNRODhQblQzekswa29Hc2orenJXNUR0bGVITmJMUGJVNnJmUVBEZ0NTQzdFaEZpNTAxVHdOMjJJV3E2Tnhra2RUVmNHdkwwR3orUHZqY00zbW8weEZmaDlNYTFDV1FZbkVkR0lMRUlOQmh6T0tnYkV3V094YUJES01hTE9QSGQ1bGMvOW5YbVc4U2RoMm56TVVaYUYzbE1rdEFnTUJBQUdqZ2dGNk1JSUJkakFPQmdOVkhROEJBZjhFQkFNQ0FRWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVLOUJwUjVSMkNmNzBhNDB1UUtiM1IwMS9DRjR3SHdZRFZSMGpCQmd3Rm9BVUs5QnBSNVIyQ2Y3MGE0MHVRS2IzUjAxL0NGNHdnZ0VSQmdOVkhTQUVnZ0VJTUlJQkJEQ0NBUUFHQ1NxR1NJYjNZMlFGQVRDQjhqQXFCZ2dyQmdFRkJRY0NBUlllYUhSMGNITTZMeTkzZDNjdVlYQndiR1V1WTI5dEwyRndjR3hsWTJFdk1JSERCZ2dyQmdFRkJRY0NBakNCdGhxQnMxSmxiR2xoYm1ObElHOXVJSFJvYVhNZ1kyVnlkR2xtYVdOaGRHVWdZbmtnWVc1NUlIQmhjblI1SUdGemMzVnRaWE1nWVdOalpYQjBZVzVqWlNCdlppQjBhR1VnZEdobGJpQmhjSEJzYVdOaFlteGxJSE4wWVc1a1lYSmtJSFJsY20xeklHRnVaQ0JqYjI1a2FYUnBiMjV6SUc5bUlIVnpaU3dnWTJWeWRHbG1hV05oZEdVZ2NHOXNhV041SUdGdVpDQmpaWEowYVdacFkyRjBhVzl1SUhCeVlXTjBhV05sSUhOMFlYUmxiV1Z1ZEhNdU1BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQmNOcGxNTFhpMzdZeWIzUE4zbS9KMjBuY3dUOEVmaFlPRkc1azlSemZ5cVp0QWppelVzWkFTMkw3MGM1dnUwbVFQeTNsUE5OaWlQdmw0LzJ2SUIreDlPWU9MVXlEVE9NU3h2NXBQQ212L0sveFpwd1VKZkJkQVZoRWVkTk8zaXlNN1I2UFZieVRpNjlHM2NOOFBSZUVueXZGdGVPM250UmNYcU54K0lqWEtKZFhaRDlacjFLSWtJeEgzb2F5UGM0Rmd4aHRiQ1MrU3N2aEVTUEJnT0o0VjlUMG1aeUNLTTJyM0RZTFAzdXVqTC9sVGFsdGt3R016ZC9jNkJ5eFc2OW9QSVE3YXVuTVpUN1haTm4vQmgxWFpwNW01TWtMNzJOVnhubjZoVXJjYnZaTkNKQklxeHc4ZHRrMmNYbVBJUzRBWFVLcUsxZHJrL05BSkJ6ZXdkWFVoIgogIF0KfQ..n73v5XvWdYPDnI2EqslM0Nlt19Dk5RpqbOnDbLkSFRnAXnNh8ch3yIjKjgtschuhsqcfovG7IQCsZcpYSbFSuw4Z2SYdCqYPvWBxlOZwSjWjvAdnkQOMTumvWp-28EEMU7IhtbK_kRbnjJ8ALBrVfA3R7IZwVuxlzoUr6Ykgq-KFgeYiokfGfS6vkN4WLAMGXD-al22gaA0PQsrTWeVeoAV1tVBCqczlQpIJ7D2NXCUI4J_BjW0n3MlTJDHaHP_XpomWbeuKcVK30LX2tVqQrBA7fRjJ3JG45Oehd0t0ZFHE3qCsOJiE5kmrX9FBIrYc5wd9Chc0CMib3--odfaThw"}}
